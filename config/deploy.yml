# Name of your application. Used to uniquely configure containers.
service: stock_monitor

# Name of the container image.
image: mj0/stock_monitor

ssh:
  user: mj

# Deploy to these servers.
servers:
  web:
    - 8.138.180.246
  job:
    hosts:
     - 8.138.180.246
    cmd: bin/jobs
  subscriber:
    hosts:
      - 8.138.180.246
    cmd: bin/subscriber


# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: other-something-mj.listenai.com
#  host: app.example.com


# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: crpi-hi8lvo8xjdxju6p5.cn-guangzhou.personal.cr.aliyuncs.com
  username: hi30863908@aliyun.com

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true
    TUSHARE_API_KEY: 5764130045754fb99f8a2b3b245de6621475dab1470ebc75fa7dd8bf
    STOCK_HOST: "http://172.20.104.150:3544"
    FT07_UID: 6929
    FT07_SEND_KEY: sctp6929t6qnl2ruhcv4oz2132xdqke

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use stock_monitor-db for a db accessory server on same machine via local kamal docker network.
    # DB_HOST: 192.168.0.2

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "stock_monitor_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: 3.4.2
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  redis:
   image: bitnami/redis:7.0
   env:
     secret:
       - REDIS_PASSWORD
     clear:
       ALLOW_EMPTY_PASSWORD: false
       REDIS_DISABLE_COMMANDS: FLUSHDB,FLUSHALL
       REDIS_TLS_CERT_FILE: /tls/redis.crt
       REDIS_TLS_KEY_FILE: /tls/redis.key
       REDIS_TLS_CA_FILE: /tls/ca.crt
       REDIS_TLS_ENABLED: yes
       REDIS_TLS_PORT: 6379
   host: "8.138.180.246"
   port: "6379:6379"
   directories:
     - data:/data
   files:
     - config/redis_tls/redis.crt:/tls/redis.crt
     - config/redis_tls/redis.key:/tls/redis.key
     - config/redis_tls/ca.crt:/tls/ca.crt